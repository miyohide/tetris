// 1マス1マスを表現するBlockクラス
class Block {
  constructor (x, y) {
    this.x = x;
    this.y = y;
  }
  draw() {
    push();
    // 幅・高さが25の四角を描く
    let s = 25;
    rect(s*this.x, s*this.y, s, s);
    pop();
  }
}

// Blockクラスが集まってテトリスのパーツを表現するMino
class Mino {
  constructor (x, y, rot, shape) {
    this.x = x;
    this.y = y;
    this.rot = rot;
    this.shape = shape;
  }
}

// プレイする領域を表現するFieldクラス
class Field {
  constructor () {
    this.tiles = [
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
    ];
  }
  // (x,y)座標を二次元配列に変換する
  tileAt(x, y) {
    return this.tiles[y][x];
  }
}

// p5.jsの最初のセットアップ関数
function setup () {
  // 描画領域のセットアップ
  createCanvas(800, 500)
}
// p5.jsの繰り返し実行される関数
function draw () {
}
